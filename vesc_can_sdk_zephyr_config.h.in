/*
 * VESC CAN SDK Zephyr Configuration Header
 * 
 * This file contains Zephyr-specific configuration options for the VESC CAN SDK.
 * It is automatically generated during the build process.
 * 
 * Copyright (c) 2025 waas AG (waas.rent)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef VESC_CAN_SDK_ZEPHYR_CONFIG_H
#define VESC_CAN_SDK_ZEPHYR_CONFIG_H

#ifdef __cplusplus
extern "C" {
#endif

// ============================================================================
// Zephyr-specific Configuration
// ============================================================================

// Define that this is a Zephyr build
#define VESC_CAN_SDK_ZEPHYR 1

// Include Zephyr headers
#include <zephyr/kernel.h>
#include <zephyr/sys/util.h>
#include <zephyr/canbus/can.h>

// ============================================================================
// Memory Management Configuration
// ============================================================================

// Use Zephyr's memory allocation functions
#define VESC_USE_ZEPHYR_MALLOC 1

// Buffer sizes for Zephyr environment
#define VESC_BUFFER_SIZE 256
#define VESC_MAX_PACKET_SIZE 64

// ============================================================================
// CAN Bus Configuration
// ============================================================================

// Use Zephyr's CAN API
#define VESC_USE_ZEPHYR_CAN 1

// CAN frame structure for Zephyr
typedef struct can_frame vesc_can_frame_t;

// ============================================================================
// Threading Configuration
// ============================================================================

// Use Zephyr's threading primitives
#define VESC_USE_ZEPHYR_THREADS 1

// Thread stack size for VESC operations
#define VESC_THREAD_STACK_SIZE 1024

// Thread priority for VESC operations
#define VESC_THREAD_PRIORITY 5

// ============================================================================
// Debugging Configuration
// ============================================================================

// Enable debug output using Zephyr's logging
#define VESC_DEBUG_ENABLED 1

// Use Zephyr's logging system
#define VESC_USE_ZEPHYR_LOGGING 1

// ============================================================================
// Compatibility Macros
// ============================================================================

// Map standard library functions to Zephyr equivalents
#ifdef VESC_USE_ZEPHYR_MALLOC
    #define vesc_malloc(size) k_malloc(size)
    #define vesc_free(ptr) k_free(ptr)
    #define vesc_calloc(nmemb, size) k_calloc(nmemb, size)
#else
    #define vesc_malloc(size) malloc(size)
    #define vesc_free(ptr) free(ptr)
    #define vesc_calloc(nmemb, size) calloc(nmemb, size)
#endif

// Map threading functions to Zephyr equivalents
#ifdef VESC_USE_ZEPHYR_THREADS
    #define vesc_thread_create(thread, stack, stack_size, entry, arg1, arg2, arg3, prio, options, delay) \
        k_thread_create(thread, stack, stack_size, entry, arg1, arg2, arg3, prio, options, delay)
    #define vesc_thread_start(thread) k_thread_start(thread)
    #define vesc_thread_join(thread, timeout) k_thread_join(thread, timeout)
#else
    #define vesc_thread_create(thread, stack, stack_size, entry, arg1, arg2, arg3, prio, options, delay) \
        pthread_create(thread, NULL, entry, arg1)
    #define vesc_thread_start(thread) /* No-op for pthreads */
    #define vesc_thread_join(thread, timeout) pthread_join(thread, NULL)
#endif

// Map logging functions to Zephyr equivalents
#ifdef VESC_USE_ZEPHYR_LOGGING
    #include <zephyr/logging/log.h>
    LOG_MODULE_REGISTER(vesc_can_sdk, CONFIG_VESC_CAN_SDK_LOG_LEVEL);
    #define VESC_LOG_ERR(fmt, ...) LOG_ERR(fmt, ##__VA_ARGS__)
    #define VESC_LOG_WRN(fmt, ...) LOG_WRN(fmt, ##__VA_ARGS__)
    #define VESC_LOG_INF(fmt, ...) LOG_INF(fmt, ##__VA_ARGS__)
    #define VESC_LOG_DBG(fmt, ...) LOG_DBG(fmt, ##__VA_ARGS__)
#else
    #define VESC_LOG_ERR(fmt, ...) printf("[ERR] " fmt "\n", ##__VA_ARGS__)
    #define VESC_LOG_WRN(fmt, ...) printf("[WRN] " fmt "\n", ##__VA_ARGS__)
    #define VESC_LOG_INF(fmt, ...) printf("[INF] " fmt "\n", ##__VA_ARGS__)
    #define VESC_LOG_DBG(fmt, ...) printf("[DBG] " fmt "\n", ##__VA_ARGS__)
#endif

#ifdef __cplusplus
}
#endif

#endif // VESC_CAN_SDK_ZEPHYR_CONFIG_H 